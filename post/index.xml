<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on DaoyiSite</title>
    <link>https://daotoyi.github.io/post/</link>
    <description>Recent content in Posts on DaoyiSite</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 01 May 2022 13:59:55 +0000</lastBuildDate>
    
	<atom:link href="https://daotoyi.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>linux 文件目录颜色及特殊权限对应的颜色</title>
      <link>https://daotoyi.github.io/post/linux-file&#43;directory-color/</link>
      <pubDate>Sun, 01 May 2022 13:59:55 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/linux-file&#43;directory-color/</guid>
      <description>CLOSED: [2022-05-01 周日 13:58] 白色：表示普通文件 蓝色：表示目录 绿色：表示可执行文件 红色：表示压缩文件 浅蓝色：链接文件 红色闪烁：表示链接的文件有问题 黄色：表示设备</description>
    </item>
    
    <item>
      <title>Vuepress 使用小结</title>
      <link>https://daotoyi.github.io/post/vuepress-manual/</link>
      <pubDate>Sat, 30 Apr 2022 19:28:58 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/vuepress-manual/</guid>
      <description>CLOSED: [2022-03-26 周六 21:13] Vue.js Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。 VuePress</description>
    </item>
    
    <item>
      <title>ox-hugo 生成 hugo/vuepress 通用 md 文件</title>
      <link>https://daotoyi.github.io/post/emacs-ox&#43;hugo-hugo-vuepress/</link>
      <pubDate>Sat, 30 Apr 2022 12:23:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/emacs-ox&#43;hugo-hugo-vuepress/</guid>
      <description>vuepress 使用的是 vdoing 主题： 只支持 yaml 格式的 frontmatter 时间格式要求 YYYY-mm-dd HH:MM:SS yaml 1 2 3 4 5 6 7 #+HUGO_BASE_DIR : ../Blog/ #+HUGO_FRONT_MATTER_FORMAT: yaml #+HUGO_AUTO_SET_LASTMOD: t #+HUGO_SECTION: post #+SEQ_TODO: TODO DRAFT DONE #+PROPERTY: header-args :eval no #+FILETAGS: :@emacs: date formate C-h v org-hugo-date-format, 在弹出的 emacs buffer 上点击 customize, 直接修</description>
    </item>
    
    <item>
      <title>Tushare</title>
      <link>https://daotoyi.github.io/post/quant-tushare/</link>
      <pubDate>Sat, 30 Apr 2022 10:08:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/quant-tushare/</guid>
      <description>数据接口 通用行情接口 积分与频次权限对应表 note 适用于回测,日线及以上 分钟及 tick 需要积分</description>
    </item>
    
    <item>
      <title>Org ox-hugo</title>
      <link>https://daotoyi.github.io/post/emacs-org-ox&#43;hugo-meta/</link>
      <pubDate>Sat, 30 Apr 2022 09:35:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/emacs-org-ox&#43;hugo-meta/</guid>
      <description>File meta 1 2 3 4 5 6 7 #+HUGO_BASE_DIR : ../Blog/ #+HUGO_FRONT_MATTER_FORMAT: yaml #+HUGO_AUTO_SET_LASTMOD: t #+HUGO_SECTION: post #+SEQ_TODO: TODO DRAFT DONE #+PROPERTY: header-args :eval no #+FILETAGS: :@emacs: Subtree/files meta 1 2 3 4 5 :PROPERTIES: :EXPORT_FILE_NAME: emacs-org-ox+hugo-meta :EXPORT_DESCRIPTION: :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :motto Refine :END: preview hugo server hugo server 是 hugo 常用的命令,只要启动了站点服务,就可以实</description>
    </item>
    
    <item>
      <title>SpaceVim</title>
      <link>https://daotoyi.github.io/post/spacevim/</link>
      <pubDate>Thu, 28 Apr 2022 20:59:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/spacevim/</guid>
      <description>install 1 2 3 4  curl -sLf https://spacevim.org/cn/install.sh | bashgit clone https://github.com/daotoyi/SpaceVim.d ~/ln -s ~/.SpceVim.d/autoload/dylayer.vim ~/.SpaceVim/autoload/SpaceVim/layers/dylayer.vim  root 1 2 3 4  su rootln -s /home/daoyi/.SpaceVim /root/.SpaceVimln -s /home/daoyi/.SpaceVim.d /root/.SpaceVim.dln -s /home/daoyi/.cache/vimfiles /root/.cache/vimfiles  Ref  SpaceVim daotoyi/SpaceVim.d  </description>
    </item>
    
    <item>
      <title>Capslock&#43;</title>
      <link>https://daotoyi.github.io/post/tool-capslock&#43;/</link>
      <pubDate>Wed, 27 Apr 2022 22:22:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/tool-capslock&#43;/</guid>
      <description>basic 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 [Keys] caps_q=keyFunc_qbar ; ------------------------------- caps_a=keyFunc_moveWordLeft caps_g=keyFunc_moveWordRight caps_e=keyFunc_moveUp caps_d=keyFunc_moveDown caps_s=keyFunc_moveLeft caps_f=keyFunc_moveRight ; ------------------------------- ; select caps_k=keyFunc_selectUp caps_j=keyFunc_selectDown caps_h=keyFunc_selectLeft caps_l=keyFunc_selectRight caps_n=keyFunc_selectWordLeft caps_m=keyFunc_selectWordRight ; caps_dot=keyFunc_selectWordRight caps_p=keyFunc_home caps_semicolon=keyFunc_end caps_c=keyFunc_copy_1 caps_v=keyFunc_paste_1 ; ------------------------------- caps_f1=keyFunc_openCpasDocs caps_f2=keyFunc_mathBoard caps_f3=keyFunc_translate caps_f4=keyFunc_winTransparent caps_f5=keyFunc_reload</description>
    </item>
    
    <item>
      <title>WxPusher</title>
      <link>https://daotoyi.github.io/post/wxpusher/</link>
      <pubDate>Wed, 20 Apr 2022 13:08:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/wxpusher/</guid>
      <description>POST 1 http://wxpusher.zjiecode.com/api/send/message/?appToken=AT_xxx&amp;amp;content=daotyi-test&amp;amp;uid= UID_xxx&amp;amp;url=https://www.daotoyi.cn j#+begin_src js { &amp;ldquo;appToken&amp;rdquo;:&amp;ldquo;AT_xxx &amp;ldquo;, &amp;ldquo;summary&amp;rdquo;:&amp;ldquo;summary-decsriptions&amp;rdquo;, &amp;ldquo;content&amp;rdquo;:&amp;ldquo;daotoyi： {{EntryTitle}}&amp;quot;, &amp;ldquo;contentType&amp;rdquo;:1, &amp;ldquo;topicIds&amp;rdquo;:[ ], &amp;ldquo;uids&amp;rdquo;:[ &amp;ldquo;UID_xxx &amp;quot; ], &amp;ldquo;url&amp;rdquo;:&amp;ldquo;hhtps://www.daotoyi.cn&amp;rdquo; } #+end_src Ref github WxPusher后台</description>
    </item>
    
    <item>
      <title>Python 装饰器高级版</title>
      <link>https://daotoyi.github.io/post/python-decorator-advanced/</link>
      <pubDate>Sat, 16 Apr 2022 20:56:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/python-decorator-advanced/</guid>
      <description>基本装饰器 装饰不带参数的函数 1 2 3 4 5 6 7 8 9 def clothes(func): def wear(): print(&amp;#39;Buy clothes!{}&amp;#39;.format(func.__name__)) return func() return wear @clothes def body(): print(&amp;#39;The body feels could!&amp;#39;) 装饰带一个参数的函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def clothes(func): def wear(anything): #</description>
    </item>
    
    <item>
      <title>Josn 格式化输入中文</title>
      <link>https://daotoyi.github.io/post/python-json-export-chinese-formate/</link>
      <pubDate>Sat, 16 Apr 2022 13:40:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/python-json-export-chinese-formate/</guid>
      <description>code 1 2 3 4 5 import json dic = {&amp;#39;a&amp;#39;: &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;: 2, &amp;#39;c&amp;#39;: &amp;#34;中文&amp;#34;} js = json.dumps(dic, sort_keys=True, indent=4, separators=(&amp;#39;,&amp;#39;, &amp;#39;:&amp;#39;), ensure_ascii=False) print(js) sort_keys：是否按照字典排序（a-z）输出 indent=4</description>
    </item>
    
    <item>
      <title>Jupyter Notebook/Lab</title>
      <link>https://daotoyi.github.io/post/python-jupyter-lab/</link>
      <pubDate>Sat, 16 Apr 2022 13:31:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/python-jupyter-lab/</guid>
      <description>notebook lab 1 2  pip install jupyterlabjupyter lab  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  rem echo off @echo offif &amp;#34;%1&amp;#34;==&amp;#34;h&amp;#34; goto begin start mshta vbscript:createobject(&amp;#34;wscript.shell&amp;#34;).run(&amp;#34;&amp;#34;&amp;#34;%~nx0&amp;#34;&amp;#34; h&amp;#34;,0)(window.close)&amp;amp;&amp;amp;exit:begin e:cd Refine\Python\Jupyterrem activate base rem manual start jupyterLab, `activate base` needed rem in jupyterlab.bat, if activate, it will not work. ::.</description>
    </item>
    
    <item>
      <title>Linux 动态链接器</title>
      <link>https://daotoyi.github.io/post/linux-ld-linux.so/</link>
      <pubDate>Sat, 16 Apr 2022 07:33:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/linux-ld-linux.so/</guid>
      <description>glibc，libc，glib glibc glibc 是 linux 的 GUN C 函数库，是 linux 系统中最底层的 API，几乎其它任何运行时库都依赖于 glibc。 glibc 除了封装 linux 操作系统所</description>
    </item>
    
    <item>
      <title>make, cmake, qmake</title>
      <link>https://daotoyi.github.io/post/make-cmake-qmake/</link>
      <pubDate>Fri, 15 Apr 2022 14:47:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/make-cmake-qmake/</guid>
      <description>make make 是用来执行 Makefile 的, Makefile 是类 unix 环境下(比如 Linux)的类似于批处理的&amp;quot;脚本&amp;quot;文件。 其基本语法是: 目标+依赖+命令 ，只有在</description>
    </item>
    
    <item>
      <title>CMD ag</title>
      <link>https://daotoyi.github.io/post/linux-cmd-ag/</link>
      <pubDate>Fri, 15 Apr 2022 14:46:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/linux-cmd-ag/</guid>
      <description>common command parameter ag -g &amp;lt;File Name&amp;gt; 类似于 find . -name &amp;lt;File Name&amp;gt; ag -i PATTERN： 忽略大小写搜索含 PATTERN 文本 ag -A PATTERN：搜索含 PATTERN 文本，并显示匹配内容之后的 n 行文本，例如</description>
    </item>
    
    <item>
      <title>Selinux</title>
      <link>https://daotoyi.github.io/post/linux-selinux/</link>
      <pubDate>Fri, 15 Apr 2022 14:46:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/linux-selinux/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 ## Reahdet # 查看SELinux状态： /usr/sbin/sestatus -v # SELinux status: enabled # or getenforce # 关闭SELinux： # 临时关闭（不用重启机器）： setenforce 0 # 设置SELi</description>
    </item>
    
    <item>
      <title>Ref</title>
      <link>https://daotoyi.github.io/post/linux/</link>
      <pubDate>Fri, 15 Apr 2022 17:10:08 +0800</pubDate>
      
      <guid>https://daotoyi.github.io/post/linux/</guid>
      <description>多个gcc/glibc版本的共存及指定gcc版本的编译</description>
    </item>
    
    <item>
      <title>Linux oh-my-zsh</title>
      <link>https://daotoyi.github.io/post/linux-oh-my-zsh/</link>
      <pubDate>Fri, 15 Apr 2022 07:11:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/linux-oh-my-zsh/</guid>
      <description>zsh 1 2 3 4 5 6  apt install zshyum/dnf install zshpacman -S zsh# change default terminalchsh -s /usr/bin/zsh  oh-my-zsh 1 2 3 4 5 6 7 8 9 10  sh -c &amp;#34;$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&amp;#34;source ~/.zshrc# plugins$ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git$ mv zsh-syntax-highlighting ~/.oh-my-zsh/plugins/zsh-syntax-highlighting# $ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/$ echo &amp;#34;plugins=(zsh-syntax-highlighting)&amp;#34; &amp;gt;&amp;gt;　~/.zshrc$ source ~/.zshrc  root user 1 2  sudo ln -s $HOME/.</description>
    </item>
    
    <item>
      <title>Python 命名</title>
      <link>https://daotoyi.github.io/post/python-name-standard/</link>
      <pubDate>Wed, 13 Apr 2022 18:06:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/python-name-standard/</guid>
      <description>Python 命名规范需要注意以下几点： 模块命名 模块推荐使用小写命名， 除非有很多字母，尽量不要用下划线 因为很多模块文件存与模块名称一致的类，模块采用小写</description>
    </item>
    
    <item>
      <title>Sublime Notes</title>
      <link>https://daotoyi.github.io/post/sublime-notes/</link>
      <pubDate>Tue, 12 Apr 2022 11:58:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/sublime-notes/</guid>
      <description>python default python config 使用默认配置报错 Unable to create process.因为默认配置使用 “C:\Program Files\WindowsApps\PythonSoft</description>
    </item>
    
    <item>
      <title>AWS 笔记</title>
      <link>https://daotoyi.github.io/post/amazon-web-services/</link>
      <pubDate>Sun, 10 Apr 2022 22:15:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/amazon-web-services/</guid>
      <description>Amazon Web Services (AWS) Notes 注册 AWS 要使用从未在 AWS 上用过的信用卡，不然你就不符合 Free Tier 的使用条件，所有服务将会按需收费 申请免费成功后免费服务只有一年的有效期，到期</description>
    </item>
    
    <item>
      <title>Xray 笔记</title>
      <link>https://daotoyi.github.io/post/xray-note/</link>
      <pubDate>Sun, 10 Apr 2022 22:15:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/xray-note/</guid>
      <description>install system 1 bash &amp;lt;(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh) install docker 1 2 3 4 5 docker pull teddysun/xray mkdir -p /etc/xray mkdir -p /etc/xray/ssl yum install -y nginx config /etc/xray/config.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41</description>
    </item>
    
    <item>
      <title>Xray&#43;XTLS&#43;VLESS 终极配置</title>
      <link>https://daotoyi.github.io/post/xray-vless-tcp-xtls-whatever/</link>
      <pubDate>Sun, 10 Apr 2022 22:15:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/xray-vless-tcp-xtls-whatever/</guid>
      <description>config VLESS over TCP with XTLS，数倍性能，首选方式 VLESS over TCP with TLS VLESS over WS with TLS VMess over TCP with TLS，不推荐 VMess over WS with TLS Trojan over TCP with TLS config note 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description>
    </item>
    
    <item>
      <title>FastKey keybinding</title>
      <link>https://daotoyi.github.io/post/fastkeysautomation/</link>
      <pubDate>Sun, 10 Apr 2022 20:31:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/fastkeysautomation/</guid>
      <description>   key func     Escape double-click close window   Alt + Inset window always on top+   Alt + G google search text   trl + ALT + T translate webpage   ALT + H hide other window   ALT + W stop watch timer   ALT + T make window transparent   Alt + Q recent files/folder   Alt + V paste without formatting   ALT + snipping tool    </description>
    </item>
    
    <item>
      <title>Linux Proxy</title>
      <link>https://daotoyi.github.io/post/linux-rpoxy/</link>
      <pubDate>Sun, 10 Apr 2022 16:43:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/linux-rpoxy/</guid>
      <description>local proxy export http_proxy=http://127.0.0.1:port config 1 2 3 4 5 6 7 8 9 10 no_proxy=localhost,127.0.0.0/8,*.local # 访问指定地址时不使用代理，可以用逗号分隔多个地址 NO_PROXY=localhost,127.0.0.0/8,*.local all_proxy=socks://proxy.example.com:8080/ ALL_PROXY=socks://proxy.example.com:8080/ http_proxy=http://proxy.example.com:8080 HTTP_PROXY=http://proxy.example.com:8080 ftp_proxy=http://proxy.example.com:8080 FTP_PROXY=http://proxy.example.com:8080 https_proxy=http://proxy.example.com:8080 HTTPS_PROXY=http://proxy.example.com:8080</description>
    </item>
    
    <item>
      <title>Docker Compose config</title>
      <link>https://daotoyi.github.io/post/docker-compose-config/</link>
      <pubDate>Sun, 10 Apr 2022 14:22:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/docker-compose-config/</guid>
      <description>compose parameter: parame note version 指定 compose 文件的版本 services 定义所有的 service 信息 build 指定 Dockerfile 所在文件夹的路径 cap_add 让容器拥有内核的某项能力 cap_drop 去掉容器内核的某项能力 command 覆盖容器启动后默认执</description>
    </item>
    
    <item>
      <title>vim/evil jump list</title>
      <link>https://daotoyi.github.io/post/vim-jump/</link>
      <pubDate>Thu, 07 Apr 2022 18:00:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/vim-jump/</guid>
      <description>TRL + o：调整到上一次光标所在的行号上，即往后跳转 TRL + i ：调整到 jump list 中当前记录的下一个记录的行号上，即往前调整</description>
    </item>
    
    <item>
      <title>Google RGB</title>
      <link>https://daotoyi.github.io/post/google-rgb/</link>
      <pubDate>Thu, 07 Apr 2022 17:52:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/google-rgb/</guid>
      <description>color 0x RGB 蓝色 4285F4 RGB: (66,133,244) 绿色 34A853 RGB: (52,168,83) 黄色 FBB05 RGB:(251,188,5) 红色 EA4335 RGB:(234,67,53)</description>
    </item>
    
    <item>
      <title>实时内核/系统</title>
      <link>https://daotoyi.github.io/post/linux-realtime-kernel/</link>
      <pubDate>Tue, 05 Apr 2022 23:16:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/linux-realtime-kernel/</guid>
      <description>实时操作系统有硬实时和软实时之分. 硬实时要求在规定的时间内必须完成操作，这是在操作系统设计时保证的； 软实时则只要按照任务的优先级，尽可能快地</description>
    </item>
    
    <item>
      <title>Kindle epub mobi azw3</title>
      <link>https://daotoyi.github.io/post/kindle-formate-epub-mobi-azw3/</link>
      <pubDate>Tue, 05 Apr 2022 23:15:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/kindle-formate-epub-mobi-azw3/</guid>
      <description>epub 格式，是通用的电子书格式，主流阅读 APP 都支持。 mobi 格式，是亚马逊开发的电子书传输格式， azw3，则是加了版权保护的 mobi 格式。 epub 格式电子书最大的特</description>
    </item>
    
    <item>
      <title>Org Table calculate</title>
      <link>https://daotoyi.github.io/post/emacs-org-table-calculate/</link>
      <pubDate>Tue, 05 Apr 2022 23:10:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/emacs-org-table-calculate/</guid>
      <description>Ref https://orgmode.org/manual/Formula-syntax-for-alc.htmlFormula-syntax-for-alc https://blog.csdn.net/csfreebird/article/details/45459465 note 引用表格中字段: @row_index$col_index 优化: @4$5=&amp;rsquo;(/ $4 $3);N, @4 已经指定了当前行数，所以后面$4 和$3 就不需要指定行号，直接用当前行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14</description>
    </item>
    
    <item>
      <title>Docker Dockerfile</title>
      <link>https://daotoyi.github.io/post/docker-docker-file/</link>
      <pubDate>Tue, 05 Apr 2022 15:32:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/docker-docker-file/</guid>
      <description>Ref Dockerfile介绍 Docker 容器入门 structure Dockerfile 分为四部分： 基础镜像信息 维护者信息 镜像操作指令 容器启动时执行指令 config 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description>
    </item>
    
    <item>
      <title>Nginx</title>
      <link>https://daotoyi.github.io/post/nginx-conf-note/</link>
      <pubDate>Mon, 04 Apr 2022 23:44:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/nginx-conf-note/</guid>
      <description>instoducton 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 worker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; keepalive_timeout 65; server { listen 80; server_name localhost; location / { root html; index index.html index.htm; } } } 根据上述文件，我们可以很明显的将 nginx.conf 配置文</description>
    </item>
    
    <item>
      <title>网络代理简介</title>
      <link>https://daotoyi.github.io/post/internet-proxy/</link>
      <pubDate>Mon, 04 Apr 2022 22:37:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/internet-proxy/</guid>
      <description>透明代理(Transparent Proxy) 是另一种类型的 HTTP 代理，它们不会修改通过它们发送的请求。 透明意味着代理本身对用户是不可见( invisible )的，也就是说用</description>
    </item>
    
    <item>
      <title>CA SSL 证书</title>
      <link>https://daotoyi.github.io/post/ca-ssl-certificate/</link>
      <pubDate>Mon, 04 Apr 2022 22:33:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/ca-ssl-certificate/</guid>
      <description>CA CA 是证书的签发机构，它是公钥基础设施（Public Key Infrastructure，PKI）的核心。CA 是负责签发证书、认证证书、管理已颁发</description>
    </item>
    
    <item>
      <title>SSL 证书签发</title>
      <link>https://daotoyi.github.io/post/certificate-sign/</link>
      <pubDate>Mon, 04 Apr 2022 18:52:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/certificate-sign/</guid>
      <description>Certbot 使用自动证书机器人 Certbot,自动签发 Let’s Encrypt 的免费证书,只是需要三个月一续,机器人自动帮忙搞定 Before 1 2 3 4 5 6 7 8 9 10 11 12 13 # 安装</description>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>https://daotoyi.github.io/post/docker-fig-compose/</link>
      <pubDate>Mon, 04 Apr 2022 08:31:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/docker-fig-compose/</guid>
      <description>Ref Fig项目介绍 Docker Compose 项目 Fig introduction Docker Compose 的前身是 Fig。 Fig 是一个基于 Docker 的 Python 工具，允许用户基于一个 YAML 文件定义多容器应用，从而可以使用 fig 命令行工具进行应</description>
    </item>
    
    <item>
      <title>Docker Watchtower</title>
      <link>https://daotoyi.github.io/post/docker-watchtower/</link>
      <pubDate>Mon, 04 Apr 2022 08:30:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/docker-watchtower/</guid>
      <description>instroduction Watchtower 会监视运行容器并监视这些容器最初启动时的镜像是否需要更新。 当 watchtower 检测到一个镜像已经有变动时，它会使用新镜像，使用相同的参数自动重新启动相应</description>
    </item>
    
    <item>
      <title>Mariadb/Mysql common command</title>
      <link>https://daotoyi.github.io/post/mariadb-mysql-common-command/</link>
      <pubDate>Mon, 04 Apr 2022 06:47:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/mariadb-mysql-common-command/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # 登陆数据库方法 mysql -u 用户名 -p 用户密码 # 修改root及用户密码 use mysql; update user set password=password(&amp;#39;11111111&amp;#39;) where user=&amp;#39;root&amp;#39; and host=&amp;#39;localhost&amp;#39;; privileges; # 创建用户</description>
    </item>
    
    <item>
      <title>v2ray 与 Xray</title>
      <link>https://daotoyi.github.io/post/xray-and-projectx/</link>
      <pubDate>Sun, 03 Apr 2022 21:44:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/xray-and-projectx/</guid>
      <description>v2ray/Project V V2Ray 的由来：V2Ray 是 继 Shadowsocks 作者@clowwindy 被请去喝茶之后，V2Ray 项目组为表示抗议而开发的，后破娃酱@breakwa11 也被请</description>
    </item>
    
    <item>
      <title>locale</title>
      <link>https://daotoyi.github.io/post/linux-locale/</link>
      <pubDate>Sun, 03 Apr 2022 17:09:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/linux-locale/</guid>
      <description>locale 分类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ locale LANG=en_US.UTF-8 LC_CTYPE=&amp;#34;en_US.UTF- 8&amp;#34; #用户所使用的语言符号及其分类 LC_NUMERIC=&amp;#34;en_US.UTF- 8&amp;#34; #数字 LC_TIME=&amp;#34;en_US.UTF-8&amp;#34; #时间显示格式 LC_COLLATE=&amp;#34;en_US.UTF-8&amp;#34; #比较和排序习惯 LC_MONETARY=&amp;#34;en_US.UTF-8&amp;#34; #LC_MONETARY LC_MESSAGES=&amp;#34;en_US.UTF- 8&amp;#34; #信息主要</description>
    </item>
    
    <item>
      <title>Packages Manager</title>
      <link>https://daotoyi.github.io/post/packages-manager/</link>
      <pubDate>Sat, 02 Apr 2022 12:30:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/packages-manager/</guid>
      <description>Scoop 安装 Scoop 依赖于 Powershell 3+ 和 .NET Framework 4.5+，因此，安装 Scoop 前请确保已经正确安装了它们。 1 2 3 iex (new-object net.webclient).downloadstring(&amp;#39;https://get.scoop.sh&amp;#39;) # 如果出现“权限”错误，请根据错误提示执行以下命令 Set-ExecutionPolicy RemoteSigned</description>
    </item>
    
    <item>
      <title>Sublime Hotkey</title>
      <link>https://daotoyi.github.io/post/sublime-hotkey/</link>
      <pubDate>Sat, 02 Apr 2022 12:29:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/sublime-hotkey/</guid>
      <description>通用（General） ↑↓←→：上下左右移动光标，注意不是不是 KJHL！ Alt：调出菜单 Ctrl + Shift + P：调出命令板（Command Palette</description>
    </item>
    
    <item>
      <title>SSL/TLS 和 SNI 概念</title>
      <link>https://daotoyi.github.io/post/ssl-tls-sni/</link>
      <pubDate>Fri, 01 Apr 2022 23:12:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/ssl-tls-sni/</guid>
      <description>自 Web 诞生以来，我们所接触的互联网时代，都有可能存在信息的截断，而 SSL 协议及其后代 TLS 提供了加密和安全性，使现代互联网安全成为可能。 SSL/TLS SSL: 安全套接字</description>
    </item>
    
    <item>
      <title>v2ray 反向代理/内网穿透</title>
      <link>https://daotoyi.github.io/post/v2ray-reverse-implement-nat-ddns/</link>
      <pubDate>Fri, 01 Apr 2022 21:50:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/v2ray-reverse-implement-nat-ddns/</guid>
      <description>说明示例 约定 约定有 3 种设备，名为 A, B, C。（这 3 种的每一种设备都可以是一台或多台） A 为不具备公网 IP 的内网服务器，运行了 NAS 或个人网盘等； B 为具有</description>
    </item>
    
    <item>
      <title>v2ray 趟坑</title>
      <link>https://daotoyi.github.io/post/v2ray-debug-config-record/</link>
      <pubDate>Fri, 01 Apr 2022 16:43:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/v2ray-debug-config-record/</guid>
      <description>port 443 端口 速度没有 80 端口快 得配套设置 security：&amp;ldquo;tsl&amp;rdquo;,设置跳过证书验证（allowInsecure：tru</description>
    </item>
    
    <item>
      <title>Jianguoyun</title>
      <link>https://daotoyi.github.io/post/jianguoyun-sync-exclude-file/</link>
      <pubDate>Fri, 01 Apr 2022 10:29:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/jianguoyun-sync-exclude-file/</guid>
      <description>坚果云中设置，倒是可以在坚果云的同步文件夹右键中选择“选择性同步”，但是只能设置到单个文件夹。 可通过以下方式设置单个文件不同步。 Windows 系统 打开您</description>
    </item>
    
    <item>
      <title>Manjaro 使用小结</title>
      <link>https://daotoyi.github.io/post/manjaro-manual/</link>
      <pubDate>Thu, 31 Mar 2022 22:53:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/manjaro-manual/</guid>
      <description>更新系统 1 2 3 4 pacman -Syy #本地的包数据库和远程的软件仓库同步 pacman -Syu pacman -Su # 如果你已经使用 pacman -Sy 将本地的包数据库与远程的仓库进行了同步，也可以只执行： 清</description>
    </item>
    
    <item>
      <title>tar 备份还原系统后无法进入桌面</title>
      <link>https://daotoyi.github.io/post/linux-selinux-tar-uncompress/</link>
      <pubDate>Thu, 31 Mar 2022 22:53:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/linux-selinux-tar-uncompress/</guid>
      <description>现象 如果因为某些缘故，所以你的系统必须要以备份的数据来回填到原本的系统中，那么得要 特别注意复原后的系统的 SELinux 问题！它可能会让你的系统⽆法存取某</description>
    </item>
    
    <item>
      <title>Linux yum/dnf/pacman/npm/yarn</title>
      <link>https://daotoyi.github.io/post/linux-cmd-packages-manager-yum-dnf-pacman/</link>
      <pubDate>Wed, 30 Mar 2022 18:49:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/linux-cmd-packages-manager-yum-dnf-pacman/</guid>
      <description>yum 1 2 3 4 5 6 7 8 9 10 11 12 13 yum check-update # 列出所有可更新的软件清单命令： yum update # 更新所有软件命令： yum install &amp;lt;package_name&amp;gt; # 仅安装指定的软件命令： yum update &amp;lt;package_name&amp;gt; # 仅更新指定的软</description>
    </item>
    
    <item>
      <title>CMD yum/dnf</title>
      <link>https://daotoyi.github.io/post/linux-cmd-yum-dnf/</link>
      <pubDate>Wed, 30 Mar 2022 18:49:00 +0800</pubDate>
      
      <guid>https://daotoyi.github.io/post/linux-cmd-yum-dnf/</guid>
      <description>yum 1 2 3 4 5 6 7 8 9 10 11 12 13 yum check-update # 列出所有可更新的软件清单命令： yum update # 更新所有软件命令： yum install &amp;lt;package_name&amp;gt; # 仅安装指定的软件命令： yum update &amp;lt;package_name&amp;gt; # 仅更新指定的软</description>
    </item>
    
    <item>
      <title>Git Pull 强制覆盖</title>
      <link>https://daotoyi.github.io/post/git-pull-force/</link>
      <pubDate>Sat, 26 Mar 2022 09:48:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/git-pull-force/</guid>
      <description>推荐方案 1 2 git fetch origin master git reset --hard origin/master “git pull”如何强制覆盖本地文件？</description>
    </item>
    
    <item>
      <title>Git 操作对比</title>
      <link>https://daotoyi.github.io/post/git-common-manual/</link>
      <pubDate>Sat, 26 Mar 2022 09:48:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/git-common-manual/</guid>
      <description>chechkout VS reset VS revert 命令 作用域 常用情景 git reset 提交层面 在私有分支上舍弃一些没有提交的更改 git reset 文件层面 将文件从缓存区中移除 git checkout 提交层面 切换分支或查看旧版本 git</description>
    </item>
    
    <item>
      <title>Git stash</title>
      <link>https://daotoyi.github.io/post/git-stash/</link>
      <pubDate>Sat, 26 Mar 2022 09:17:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/git-stash/</guid>
      <description>git stash 命令用于将更改储藏在脏工作目录中。 useage 1 2 3 4 5 6 7 git stash # git stash save git stash list # 列出 git stash show # 进行检查 git stash apply # 恢复 git stash apply stash@{2} git stash drop stash@{2} # 移除储藏 git stash pop #</description>
    </item>
    
    <item>
      <title>CPU Frequency</title>
      <link>https://daotoyi.github.io/post/cpu-frequency/</link>
      <pubDate>Fri, 25 Mar 2022 22:10:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/cpu-frequency/</guid>
      <description>主频=外频×倍频系数 主频 即 CPU 内核工作的主时钟频率，表示在 CPU 内数字脉冲信号震荡的速度。 外频 通常为系统总线的工作频率，是 CPU 的基准频率，单位是 MH</description>
    </item>
    
    <item>
      <title>CMD stty</title>
      <link>https://daotoyi.github.io/post/linux-cmd-stty/</link>
      <pubDate>Fri, 25 Mar 2022 21:03:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/linux-cmd-stty/</guid>
      <description>Stty 指令简介 TTY 是 Teletype 或 Teletypewriter 的缩写，原来是指电传打字机，后来这种设备逐渐键盘和显示器取代。不管是电传打字机还是键盘显示器，都是作为计算机的终端设备存</description>
    </item>
    
    <item>
      <title>ConnectUtility</title>
      <link>https://daotoyi.github.io/post/connectutility/</link>
      <pubDate>Sun, 20 Mar 2022 11:29:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/connectutility/</guid>
      <description>直接配对 无线鼠标配对步骤 无线鼠标断电重启 同时按住左、中、右 3 个键，持续 40-60s 左右 在 2 的过程中插入无线接收器，配对过程中（鼠标指示灯秒闪） 配对成功</description>
    </item>
    
    <item>
      <title>Github Actions</title>
      <link>https://daotoyi.github.io/post/github-actions/</link>
      <pubDate>Sat, 19 Mar 2022 22:33:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/github-actions/</guid>
      <description>GitHub Actions入门教程：自动化部署静态博客 example 将博客原文档推送给 github 的仓库 repo1. Github Actions 接收到 push 请求后，按以下配置将生成的静态内容推送给 github 的仓库 rep</description>
    </item>
    
    <item>
      <title>Github 推送验证</title>
      <link>https://daotoyi.github.io/post/github-access-verification-with-token/</link>
      <pubDate>Sat, 19 Mar 2022 13:00:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/github-access-verification-with-token/</guid>
      <description>采用 token 进行认证访问 重新设置远程仓库 1 2 git remote rm origin git remote add origin https://hao203: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@github.com/hao203/Demo.git 修改远程仓库（recommend） 1 2 3 4 5 git remote set-url origin https://userName:token@github.com/userName/reponame.git # or git remote set-url origin https://token@github.com/userName/reponame.git git remote set-url origin https://hao203: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@github.com/hao203/Demo.git 将 token 当</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>https://daotoyi.github.io/post/markdown-notes/</link>
      <pubDate>Sat, 19 Mar 2022 11:04:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/markdown-notes/</guid>
      <description>图片排列 普通左右排列 要一张图片接着一张图片的写，中间不能有换行。如果换行的话则图片也换行 ，例如： 1 ![描述](图片链接)![描述](图片链接</description>
    </item>
    
    <item>
      <title>Github Profile</title>
      <link>https://daotoyi.github.io/post/github-profile-show-stats-language-and-metrics/</link>
      <pubDate>Sat, 19 Mar 2022 10:51:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/github-profile-show-stats-language-and-metrics/</guid>
      <description>Metrics !Metrics 统计卡片 stats !Anurag&amp;rsquo;s GitHub stats theme dark, radical, merko, gruvbox, tokyonight, onedark, cobalt, synthwave, highcontrast, dracula language ![这里写昵称&amp;rsquo;s Most used languages](https://github-readme-stats.vercel.app/api/top-langs?username=%E8%BF%99%E9%87%8C%E6%9B%BF%E6%8D%A2%E6%88%90%E4%BD%A0%E7%9A%84 GitHub ID&amp;amp;show_icons=true&amp;amp;count_private=true&amp;amp;theme=gotham) !daotoyi&amp;rsquo;s Most used languages 统计卡片并列显示 stats 和 language 卡片要紧接着写,不能空格换</description>
    </item>
    
    <item>
      <title>CAD</title>
      <link>https://daotoyi.github.io/post/cad-notes/</link>
      <pubDate>Thu, 17 Mar 2022 19:58:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/cad-notes/</guid>
      <description>输出 PDF 文件线条太粗 CAD 软件界面点击打印 打印-模型 打印样式表(画笔指定) 选定样式表(acad.ctb) 点击打印样式表后面的图标 打印样式表编辑器 打</description>
    </item>
    
    <item>
      <title>IFTTT</title>
      <link>https://daotoyi.github.io/post/iftt-example/</link>
      <pubDate>Thu, 17 Mar 2022 19:30:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/iftt-example/</guid>
      <description>if rssfeed, then telegram 用 IFTTT 让 Telegram 变得更加「聪明」 webhoos Python 发送手机通知教程 make request - JSON body To trigger an Event with an arbitrary JSON payload Make a POST or GET web request to: https://maker.ifttt.com/trigger/%7Bevent%7D/json/with/key/bMhBKbwkXMxADTWok23HtB Note the extra /json path element in this trigger. With any JSON body. For example: { &amp;ldquo;this&amp;rdquo; : [ { &amp;ldquo;is&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>ImagesMagick</title>
      <link>https://daotoyi.github.io/post/imagemagick-pdf-switch-image/</link>
      <pubDate>Thu, 17 Mar 2022 19:30:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/imagemagick-pdf-switch-image/</guid>
      <description>ImageMagick 轻松转换 PDF 和图片 将当前文件夹下所有 JPG 图片合并为一个 PDF 文档： convert *.jpg 1.pdf 将当前文件夹下指定的图片合并为一个 PDF 文档： conert 01.jpg 02.png 1.pdf PDF 分解为图片: convert 1.pdf 11.jpg 让分</description>
    </item>
    
    <item>
      <title>PicGo&#43;Github</title>
      <link>https://daotoyi.github.io/post/picgo-github-picsbed/</link>
      <pubDate>Thu, 17 Mar 2022 19:30:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/picgo-github-picsbed/</guid>
      <description>PicGo 直接参考官方指南即可. Github 新建仓库 easy. note 上传时报服务器 由于常用 FastGithub.UI 工具访问 github, 当上传图片时报错. 应该是代理出问题,需要关闭此工具才可上传成功.</description>
    </item>
    
    <item>
      <title>Github 图床显示图片</title>
      <link>https://daotoyi.github.io/post/github-picsbed-show-pictures/</link>
      <pubDate>Wed, 16 Mar 2022 00:30:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/github-picsbed-show-pictures/</guid>
      <description>Github/Gitee 格式 可显示的链接格式: https://raw.githubusercontent.com/UserName/RepoName/BranchName/ 如:https://raw.githubusercontent.com/daotoyi/picsbed/main/</description>
    </item>
    
    <item>
      <title>WordPress 笔记</title>
      <link>https://daotoyi.github.io/post/wordpress-and-bt-install-deploy/</link>
      <pubDate>Tue, 15 Mar 2022 22:26:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/wordpress-and-bt-install-deploy/</guid>
      <description>VPS Panel Compare 最强大、最完善建站工具：WordPress (CMS) 最受初学者欢迎的建站工具：Wix 最设计优良的建站工具：Squarespace 最容易使用的建</description>
    </item>
    
    <item>
      <title>Linux capacity &amp;&amp; reduce</title>
      <link>https://daotoyi.github.io/post/linux-virtual-machine-capacity-and-reduce/</link>
      <pubDate>Mon, 14 Mar 2022 20:11:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/linux-virtual-machine-capacity-and-reduce/</guid>
      <description>Reduce capacity 方法 1：给项目的 git 仓库瘦身 1 2 3 4 5 6 # 1.删除无用的分支 $ git branch -d &amp;lt;branch_name&amp;gt; # 2.删除无用的 tag $ git tag -d &amp;lt;tag_name&amp;gt; # 3.清理本地版本库 $ git gc --prune=now 方法 2：删除</description>
    </item>
    
    <item>
      <title>Hugo 使用 Github Action 使用</title>
      <link>https://daotoyi.github.io/post/hugo-github-action/</link>
      <pubDate>Sun, 13 Mar 2022 23:24:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/hugo-github-action/</guid>
      <description>Useage Touch .github/workflows/main.yml in root directory. confiure as: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 name:DeployGitHubPages# 触发条件：在 push 到 master/main 分支后 on:push:branches:- main# 任务 jobs:build-and-deploy:# 服务器环境：最</description>
    </item>
    
    <item>
      <title>Linux compare with Windows</title>
      <link>https://daotoyi.github.io/post/linux-compare-with-windows/</link>
      <pubDate>Sun, 13 Mar 2022 15:17:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/linux-compare-with-windows/</guid>
      <description>CMD link (mklink ln) MKLINK [[/D] | [/H] | [/J]] Link Target para function /D 创建目录符号链接。默认为文件符号链接。 /H 创建硬链接而非符号链接。 /J 创建目录联接。 Lin k 指定新的符号链接名称。 Tar get</description>
    </item>
    
    <item>
      <title>eamcs export</title>
      <link>https://daotoyi.github.io/post/emacs-export-manual/</link>
      <pubDate>Fri, 11 Mar 2022 17:46:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/emacs-export-manual/</guid>
      <description>highlight inline =code=, ~code~
highlight in export file code-src</description>
    </item>
    
    <item>
      <title>Export PDF</title>
      <link>https://daotoyi.github.io/post/emacs-export-pdf-setting/</link>
      <pubDate>Fri, 11 Mar 2022 17:46:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/emacs-export-pdf-setting/</guid>
      <description>LATEX_HEADER 1 2 3 4 5 6 #+LATEX_HEADER: documentclass{article} #+LATEX_CLASS_OPTIONS: [a4paper] #+LATEX_HEADER: usepackage{xeCJK} #+LATEX_HEADER: usepackage{minted} #+LATEX_HEADER: usepackage[margin=2cm]{geometry} #+LATEX_HEADER: setminted{fontsize=small,baselinestretch=1} 防止页面溢出 1 2 3 #+ATTR_LATEX: :environment longtable :align l|lp{3cm}r|l | ..... | ..... | | ..... | ..... |</description>
    </item>
    
    <item>
      <title>Org 中文表格对齐</title>
      <link>https://daotoyi.github.io/post/emacs-export-align-table-with-chinese/</link>
      <pubDate>Fri, 11 Mar 2022 17:46:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/emacs-export-align-table-with-chinese/</guid>
      <description>方法 1中文表格对齐 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ;; ----------------------------------------------------------------------------- ;; setting font for mac system ;; ----------------------------------------------------------------------------- ;; Setting English Font (defun s-font() (interactive) ;; font config for org table showing. (set-face-attribute &amp;#39;default nil :font &amp;#34;Monaco 12&amp;#34;) ;; Chinese Font 配制中文字</description>
    </item>
    
    <item>
      <title>RSShub&#43;Vercel 笔记</title>
      <link>https://daotoyi.github.io/post/rsshub-vercel-deploy/</link>
      <pubDate>Fri, 11 Mar 2022 09:25:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/rsshub-vercel-deploy/</guid>
      <description>login 打开 https://vercel.com 打开后，使用 Github 帐号登陆。（Github 在大陆地区可以正常访问） deploy 接着打开 https://vercel.com/import/project?template=https://github.com/DIYgod/RSSHub 点击右边的“Github”，登陆授权后，输入仓库名称，比如</description>
    </item>
    
    <item>
      <title>面向 WEB 的免费托管</title>
      <link>https://daotoyi.github.io/post/web-trusteeship-freely/</link>
      <pubDate>Fri, 11 Mar 2022 08:02:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/web-trusteeship-freely/</guid>
      <description>GitHub Pages1 GitHub Pages 让开发者可以在 .github.io 域上免费托管静态站点。 InspireCloud2 轻服务（即 InspireCloud）是由字节跳动提供的开箱即用的云服务. 免费提供以下服务: 50</description>
    </item>
    
    <item>
      <title>WIFI 模式：STA 及 AP</title>
      <link>https://daotoyi.github.io/post/wifi-sta-and-ap-model/</link>
      <pubDate>Fri, 11 Mar 2022 07:52:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/wifi-sta-and-ap-model/</guid>
      <description>AP: Access Point，提供无线接入服务，允许其它无线设备接入，提供数据访问.是一个无线网络的创建者,是网络的中心节点。 一般的无线路由/网桥工作在该</description>
    </item>
    
    <item>
      <title>Hugo 主题 book 使用小结</title>
      <link>https://daotoyi.github.io/post/hugo-theme-book-manual/</link>
      <pubDate>Wed, 09 Mar 2022 00:07:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/hugo-theme-book-manual/</guid>
      <description>Menu Render pages from the content/docs section as a menu in a tree structure. set title and weight in the front matter of pages to adjust the order and titles in the menu. /menu deprated. Blog A simple blog is supported in the section posts. 保证 content 目录下只有一个 posts 目录。 Plugins numbered scrollbars themes/hugo-book/assets/_custom.scss 1 2 3 4 /* You can</description>
    </item>
    
    <item>
      <title>Hugo 主题 LoveIt 使用小结</title>
      <link>https://daotoyi.github.io/post/hugo-theme-loveit-archive/</link>
      <pubDate>Tue, 08 Mar 2022 11:31:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/hugo-theme-loveit-archive/</guid>
      <description>compatible</description>
    </item>
    
    <item>
      <title>Hugo 使用总结</title>
      <link>https://daotoyi.github.io/post/hugo-manual/</link>
      <pubDate>Tue, 08 Mar 2022 11:31:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/hugo-manual/</guid>
      <description>按不同配置启动 在 development 环境下，可指定以不同的模式启动以预览效果。 1 2 hugo --config debugconfig.toml hugo --config a.toml,b.toml,c.toml fix content hugo server to show effect on website will deployed. example: 1 2 3 4 5 6 /path/to/where/you/installed/hugo server --source=./docs &amp;gt; 29 pages created &amp;gt; 0 tags index created &amp;gt; in</description>
    </item>
    
    <item>
      <title>VPN 推荐</title>
      <link>https://daotoyi.github.io/post/vpn-v2rayvpn-v2free/</link>
      <pubDate>Sun, 06 Mar 2022 16:59:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/vpn-v2rayvpn-v2free/</guid>
      <description>v2ray VPN Repo:v2ray.vpn 移动端参考 SS 设计，配置方法可参考手机版Shadowsocks技巧，“分应用VPN”快速应用设置到所有服务器配置文件。 路由 设置选项 全局 绕</description>
    </item>
    
    <item>
      <title>v2ray 搭建笔记</title>
      <link>https://daotoyi.github.io/post/v2ray-websocket-nginx-cnd-tsl/</link>
      <pubDate>Sat, 05 Mar 2022 20:58:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/v2ray-websocket-nginx-cnd-tsl/</guid>
      <description>目前官方推荐的协议组合方式： VMess over Websocket with TLS VMess over TLS VMess over HTTP/2 （使用 TLS 的 HTTP/2，并非 h2c） Shadowsocks(AEAD) over Websocket with TLS v2ray(WebSocket) startup 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description>
    </item>
    
    <item>
      <title>GCP 笔记</title>
      <link>https://daotoyi.github.io/post/google-cloud-platform/</link>
      <pubDate>Sat, 05 Mar 2022 17:20:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/google-cloud-platform/</guid>
      <description>GCP（Google Cloud Platform）入门 防火墙 建站之后若无法访问, 可能需要设置防火墙规则(入站防火墙)(GCP 建站及配置). 流量方向是：</description>
    </item>
    
    <item>
      <title>v2ray 笔记</title>
      <link>https://daotoyi.github.io/post/v2ray-manual/</link>
      <pubDate>Sat, 05 Mar 2022 17:20:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/v2ray-manual/</guid>
      <description>introduction V2Ray 用户手册 v2ray简易手册 V2Ray 项目地址 TLS/XTLS TLS (Transport Layer Security) 译作: 传输层安全性协议 (wikipedia:传输层安全性协议) 前身 *安全套接层*（Secu</description>
    </item>
    
    <item>
      <title>Domain name 域名概念</title>
      <link>https://daotoyi.github.io/post/domain-instruction/</link>
      <pubDate>Sat, 05 Mar 2022 16:31:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/domain-instruction/</guid>
      <description>域名 域名（英语：Domain Name），又称网域，是由一串用点分隔的名字组成的 Internet 上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定</description>
    </item>
    
    <item>
      <title>Edge 无法翻译、无法下载插件</title>
      <link>https://daotoyi.github.io/post/edge-access-extension/</link>
      <pubDate>Fri, 04 Mar 2022 14:44:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/edge-access-extension/</guid>
      <description>State &amp;ldquo;TODO&amp;rdquo; from [2022-03-04 周五 14:44] 修改 host 文件 修改 C:\Windows\System32\drivers\etc 文件，增加以下内容。 1 2 3 4 5 6 7 8 9 10 11 # Edge 翻译 117.28.245.88 edge.microsoft.com # 商店扩展 117.28.245.88 msedgeextensions.sf.tlu.dl.delivery.mp.microsoft.com # 微软账户 117.28.245.88 logincdn.msauth.net 117.28.245.88 login.live.com 117.28.245.88 account.live.com 117.28.245.88 acctcdn.msauth.net 注意 hots 文件不能直</description>
    </item>
    
    <item>
      <title>Docker daemon</title>
      <link>https://daotoyi.github.io/post/docker-daemon/</link>
      <pubDate>Thu, 03 Mar 2022 09:56:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/docker-daemon/</guid>
      <description>startup error 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # systemctl status docker ● docker.service - Docker Application Container Engine Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled) Active: failed (Result: exit-code) since Wed 2022-03-02 13:52:17 UTC; 2min 57s ago Docs: https://docs.docker.com Process: 8646 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock (code=exited, status=1/FAILURE) Main PID: 8646 (code=exited, status=1/FAILURE) Mar 02 13:52:17 instance-1 systemd[1]: docker.service: Service hold-off time</description>
    </item>
    
    <item>
      <title>Docker 远程访问</title>
      <link>https://daotoyi.github.io/post/docker-remote-access/</link>
      <pubDate>Thu, 03 Mar 2022 09:54:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/docker-remote-access/</guid>
      <description>默认情况下，Docker 守护进程会生成一个 socket 文件来进行本地进程通信，而不会监听任何端口，因此只能在本地使用 docker 客户端或者使用 Docker API 进行操作。 如果</description>
    </item>
    
    <item>
      <title>System Port</title>
      <link>https://daotoyi.github.io/post/system-port/</link>
      <pubDate>Wed, 02 Mar 2022 16:02:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/system-port/</guid>
      <description>netstat 提供有关网络连接的信息. netstat -tunlp -t：显示 TCP 端口。 -u：显示 UDP 端口。 -n：显示数字地址而不是解析主机。 -l：仅显示侦听端口。 -p：显示监听器进</description>
    </item>
    
    <item>
      <title>Time TZ</title>
      <link>https://daotoyi.github.io/post/system-time-timezone/</link>
      <pubDate>Wed, 02 Mar 2022 16:02:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/system-time-timezone/</guid>
      <description>GMT，CST，UTC UTC 协调世界时 ，又称 世界标准时间 或 世界协调时间 ， UTC（Coordinated Universal Time），是最主要的世界时间标准，其以</description>
    </item>
    
    <item>
      <title>RSS 整理</title>
      <link>https://daotoyi.github.io/post/rss-instruction/</link>
      <pubDate>Wed, 02 Mar 2022 15:40:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/rss-instruction/</guid>
      <description>(Really Simple Syndication,简易信息聚合) RSSHub RSSHub 使用文档 Docker部署 heroku部署 Vercel 和 Heroku 方案十分友好。 RSShub 镜像网站 9 个 公开的 RSShub 镜像网站，它</description>
    </item>
    
    <item>
      <title>Docker 使用镜像</title>
      <link>https://daotoyi.github.io/post/docker-operation-manual/</link>
      <pubDate>Sun, 27 Feb 2022 11:53:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/docker-operation-manual/</guid>
      <description>State &amp;ldquo;DONE&amp;rdquo; from [2022-02-27 周日 11:53] Docker 容器（containers）是从 Docker 镜像生成出来的。默认情况下，Docker 从 Docker Hub 下载这些镜像，Docker 公司在运营这个 Docker H</description>
    </item>
    
    <item>
      <title>Docker 初识</title>
      <link>https://daotoyi.github.io/post/docker-instruction/</link>
      <pubDate>Sun, 27 Feb 2022 11:53:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/docker-instruction/</guid>
      <description>State &amp;ldquo;DONE&amp;rdquo; from [2022-02-27 周日 11:53] Docker 是一个开源的应用容器引擎。Docker 可以让开发者打包他们创建的应用以及相应的依赖包到一个可移植、轻量级的容器中。Docke</description>
    </item>
    
    <item>
      <title>Docker 安装</title>
      <link>https://daotoyi.github.io/post/docker-install-manual/</link>
      <pubDate>Sun, 27 Feb 2022 11:53:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/docker-install-manual/</guid>
      <description>官方 Ubuntu 存储库中提供的 Docker 安装软件包可能不是最新版本，为了保证是最新版，我们从 Docker 官方库来安装。 Ubuntu 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 将官方 Docker 版本库的</description>
    </item>
    
    <item>
      <title>Docker 提交推送</title>
      <link>https://daotoyi.github.io/post/docker-push-to-dockerhub/</link>
      <pubDate>Sun, 27 Feb 2022 11:53:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/docker-push-to-dockerhub/</guid>
      <description>State &amp;ldquo;DONE&amp;rdquo; from [2022-02-27 周日 11:53] Docker commit 1 docker commit -m &amp;#34;What you did to the image&amp;#34; -a &amp;#34;Author Name&amp;#34; container_id repository/new_image_name -m 是提交镜像的备注 -a 用于指定作者名 container_id 是 Docker Hub 用户名 当我们提交新镜像时，新生成的镜像也会在我们的</description>
    </item>
    
    <item>
      <title>Inoreader 访问</title>
      <link>https://daotoyi.github.io/post/inoreader-access-in-mainland/</link>
      <pubDate>Sun, 27 Feb 2022 08:21:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/inoreader-access-in-mainland/</guid>
      <description>State &amp;ldquo;DONE&amp;rdquo; from [2022-02-27 周日 08:21] WEB Inoreader -&amp;gt; Innoreader 可正常墙内访问，且同一账号登录，内容一致。 APK APKHere 可下载 Inoreader, APKPure 未收录, Google Play 无法打开. 通过科学上网登录移动端 Inoreader</description>
    </item>
    
    <item>
      <title>Huginn 笔记</title>
      <link>https://daotoyi.github.io/post/huginn-manual/</link>
      <pubDate>Sun, 27 Feb 2022 08:19:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/huginn-manual/</guid>
      <description>Huginn is a system for building agents that perform automated tasks for you online. 中文社区 英文官网 heroku deploy 利用 Huginn 打造一站式信息阅读平台 heroku 空间几点说明： heroku 免费账户的网站在 30 分钟内无人访问后会自动关闭（</description>
    </item>
    
    <item>
      <title>Table: latex 表格超详细教程</title>
      <link>https://daotoyi.github.io/post/latex-export-table/</link>
      <pubDate>Sat, 19 Feb 2022 12:44:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/latex-export-table/</guid>
      <description>常用配置说明 \begin{table*}[t], *号，是为了让表格宽度与页面等宽而不是二分之一宽 \begin{center}让表格居中 \caption{Your first table.}写表格的标题 \begi</description>
    </item>
    
    <item>
      <title>Latex Config</title>
      <link>https://daotoyi.github.io/post/latex-common-manual/</link>
      <pubDate>Sat, 19 Feb 2022 12:43:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/latex-common-manual/</guid>
      <description>latex_introduction 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #+begin_src latex \documentclass[oneside]{article}% \usepackage{ctex} \usepackage{geometry} \usepackage[dvipsnames, svgnames, x11names]{xcolor} \usepackage{graphics} \usepackage[ colorlinks=true, linkcolor=Navy, urlcolor=Navy, citecolor=Navy, anchorcolor=Navy ]{hyperref} \usepackage{enumerate} \usepackage{tcolorbox} \tcbuselibrary{skins, breakable} \usepackage[english]{babel} \usepackage[cache=false]{minted} \geometry{ width = 210mm,% height = 297mm, left = 19.1mm,% right = 19.1mm,%</description>
    </item>
    
    <item>
      <title>Table: Org-mode 导出表格过宽溢出页面</title>
      <link>https://daotoyi.github.io/post/org-latex-table-width/</link>
      <pubDate>Sat, 19 Feb 2022 12:43:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/org-latex-table-width/</guid>
      <description>表格横置 \usepackage(lscape) 建议加在表格的最外层 表格横置 \usepackage{rotating} 页面横置 \usepackage{pdflscape} 自动调整字体的大小 \usepackage{graphix} 缩小字体 \footnotesize 在\begin{table}后使用\footnotesize</description>
    </item>
    
    <item>
      <title>elfeed,elfeed-org,elfeed-dashboard 使用总结</title>
      <link>https://daotoyi.github.io/post/emacs-elfeed-org/</link>
      <pubDate>Fri, 18 Feb 2022 11:37:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/emacs-elfeed-org/</guid>
      <description>elfeed elfeed elfeed-org elfeed-org 一级标题的 tags 必须是 elfeed . elfeed-dashboard elfeed-dashboard 注意得按 repo 标的配置抄写.模板参考 括号要对齐,链接位置的描述词占位需要一致.</description>
    </item>
    
    <item>
      <title>org-download&#43;screenshot 使用总结</title>
      <link>https://daotoyi.github.io/post/org-download-on-windows/</link>
      <pubDate>Fri, 18 Feb 2022 11:22:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/org-download-on-windows/</guid>
      <description>org-download org-download 使用的 ImageMagick 工具无法在 winodw 上截屏（import）。 使用 org-download-yank 直接粘贴 URL 地址 手动拖动本地图片到 emacs 中. 首次拖入emacs前需要触发org-downlo</description>
    </item>
    
    <item>
      <title>flymode 在 windows 上使用总结</title>
      <link>https://daotoyi.github.io/post/hunspell-flymode-on-windows/</link>
      <pubDate>Fri, 18 Feb 2022 11:07:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/hunspell-flymode-on-windows/</guid>
      <description>ENV win10 emacs-27.1 spacemacs foreword spell-checking flymode export error. spacemacs 需要 aspell0.6 以上的版本，但是 Latest Version: GNU Aspell-0.50.3 (win32)（Released Dec 22, 2002）. Aspell 找到 Aspell6 的字典包，但未找到程序包,也是不能</description>
    </item>
    
    <item>
      <title>Magit 使用</title>
      <link>https://daotoyi.github.io/post/emacs-magit-manual/</link>
      <pubDate>Sun, 13 Feb 2022 23:35:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/emacs-magit-manual/</guid>
      <description>基本说明 status notes Head 当前处于哪个 branch Push 要 push 到哪个远程 branch Untracked files 哪些文件未被 gt 管理 Unstaged Changes 哪些文件修改了未 stage Staged Changes 哪些文件处于 staged 状态(即运行了 git adc) Unpushed to 哪些 commit 未 push</description>
    </item>
    
    <item>
      <title>Unicode</title>
      <link>https://daotoyi.github.io/post/unicode-utf8-gbk/</link>
      <pubDate>Sun, 13 Feb 2022 14:25:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/unicode-utf8-gbk/</guid>
      <description>State &amp;ldquo;DONE&amp;rdquo; from &amp;ldquo;TODO&amp;rdquo; [2022-02-13 周日 14:25] 概述 用什么编码，就用什么解码 ASCII 码 ASCII 码占 8 个比特位，也就是一个字节，其中最前面一个位是扩展位，都是 0，为了日后扩展所用，其余位</description>
    </item>
    
    <item>
      <title>Dired 使用</title>
      <link>https://daotoyi.github.io/post/emacs-dired-common-hotkey/</link>
      <pubDate>Sun, 13 Feb 2022 06:58:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/emacs-dired-common-hotkey/</guid>
      <description>hotkey cmd function notes C-x d dired 进入 Dired 模式 ^ dired-up-directory 返回上一目录 p/C-p diredp-previous-line 上一行 n/C-n/SPC diredp-next-line 下一行 &amp;lt; dired-prev-dirline 上一个目录行 &amp;gt; dired-next-dirline 下一个目录行 g revert-buffer 刷新文件列表 + 新建目录 C 拷贝文件 把 dired-recursive-copies 设为非 nil</description>
    </item>
    
    <item>
      <title>[vim 不需要多光标编辑] (&lt;https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/&gt;)</title>
      <link>https://daotoyi.github.io/post/vim-donnot-need-multipe-cursor-edit/</link>
      <pubDate>Sat, 12 Feb 2022 14:54:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/vim-donnot-need-multipe-cursor-edit/</guid>
      <description>前言 Sublime text 首次引入了多光标编辑功能 1 （据我所知），这意味着可以在多个光标位置同时编辑代码。Vim 有个插件（vim-multiple-curso</description>
    </item>
    
    <item>
      <title>Git submodule VS subtree</title>
      <link>https://daotoyi.github.io/post/git-submodule-vs-subtree/</link>
      <pubDate>Sat, 12 Feb 2022 09:49:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/git-submodule-vs-subtree/</guid>
      <description>State &amp;ldquo;DONE&amp;rdquo; from &amp;ldquo;TODO&amp;rdquo; [2022-02-12 周六 09:49] 仓库共用 两种子仓库使用方式 git submodule(子模块) git subtree(子树合并) git subtree 本质就是把子项目目录作为一个普通的文</description>
    </item>
    
    <item>
      <title>SSD 性能提升</title>
      <link>https://daotoyi.github.io/post/ssd-performance-improvement/</link>
      <pubDate>Tue, 08 Feb 2022 08:18:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/ssd-performance-improvement/</guid>
      <description>固态硬盘接口 性能从低到高排序为: SATA 接口 SATA Revision 1.0 SATA Revision 2.0 SATA Revision 3.0 M.2 接口 一种支持 SATA 协议 一种支持 NVME 协议 协议性能更好，走 PCIE 通道，带宽高达 32G PCI-E 接口 直接通过 PCI-E</description>
    </item>
    
    <item>
      <title>Domain name system 解析</title>
      <link>https://daotoyi.github.io/post/doman-name-system/</link>
      <pubDate>Mon, 07 Feb 2022 08:44:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/doman-name-system/</guid>
      <description>State &amp;ldquo;DONE&amp;rdquo; from &amp;ldquo;TODO&amp;rdquo; [2022-02-12 周六 08:44] DNS（Domain Name System[域名系统]) 万维网上作为域名和 IP 地址相互映射的一个[分布式数据库]能够使用户更方便的访问</description>
    </item>
    
    <item>
      <title>Github Pages 托管静态网页绑定自定义域名</title>
      <link>https://daotoyi.github.io/post/github-pages-custome-domain-name-ssl/</link>
      <pubDate>Mon, 07 Feb 2022 08:29:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/github-pages-custome-domain-name-ssl/</guid>
      <description>Git Pages 只能为每个 GitHub 帐户创建一个用户或组织站点；而项目站点没有限制。 用户或组织站点 新建 username.github.io 仓库，将静态网页文件所在分支托管到 Github Pages。 项目站点</description>
    </item>
    
    <item>
      <title>snippets 使用总结</title>
      <link>https://daotoyi.github.io/post/emacs-snippets-manual/</link>
      <pubDate>Sun, 06 Feb 2022 08:21:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/emacs-snippets-manual/</guid>
      <description>常用指令 hotkey M-x （function） note C-c &amp;amp; C-n yas-new-snippet C-c &amp;amp; C-s yas-insert-snippet C-c &amp;amp; C-v yas-visit-snippet-file yas-tryout-snippet test 可以保存到两个地方： ~/.emacs.d/private/snippets/modename-mode/ ~/.spacemacs.d/snippets/modename-mode/ 模板说明 1 2 3 4 5 6 7 8 9 #name : #ifndef XXX; #define XXX; #endif # key: once # -- #ifndef ${1:`(upcase</description>
    </item>
    
    <item>
      <title>Github App 及 OAuth</title>
      <link>https://daotoyi.github.io/post/oauth/</link>
      <pubDate>Sat, 05 Feb 2022 08:28:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/oauth/</guid>
      <description>令牌与密码 令牌（token）与密码（password）的作用是一样的，都可以进入系统，但是有三点差异。 令牌是短期的，到期会自动失效，用户自己</description>
    </item>
    
    <item>
      <title>Git 使用问题整理</title>
      <link>https://daotoyi.github.io/post/github-mannal-issues/</link>
      <pubDate>Sat, 05 Feb 2022 08:25:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/github-mannal-issues/</guid>
      <description>fatal: in unpopulated submodule XXX 若是直接从 github 中下载到对应的项目，直接放到自己的版本控制中，在提交就会报此错误 fatal: in unpopulated submodule. 即使删除了.git 文件也是没用的。 解决办法: 1</description>
    </item>
    
    <item>
      <title>Hugo 主题 even 使用小结</title>
      <link>https://daotoyi.github.io/post/hugo-theme-even-archive/</link>
      <pubDate>Sat, 05 Feb 2022 08:19:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/hugo-theme-even-archive/</guid>
      <description>config hugo &amp;ndash;config debugconfig.toml hugo &amp;ndash;config a.toml,b.toml,c.toml commmet 在 even 主题中加入 utterances 创建 repository 在 Github 上新建一个 public repo，用于存储评论内容 配置 config 为了方便配置，把需要的参数都放在 config.toml 文档中，在该文档中加</description>
    </item>
    
    <item>
      <title>Hugo-markdown</title>
      <link>https://daotoyi.github.io/post/hugo-markdown/</link>
      <pubDate>Thu, 03 Feb 2022 11:17:37 +0800</pubDate>
      
      <guid>https://daotoyi.github.io/post/hugo-markdown/</guid>
      <description>简述 采用 markdown 在 Hugo + Github 部署的静态网站上记录个人博客。 Hugo Hugo 是由 Go 语言实现的静态网站生成器。 简单、易用、高效、易扩展、快速部署。 Github github pages 完全免费 可以绑</description>
    </item>
    
    <item>
      <title>Hugo 使用 orgmode</title>
      <link>https://daotoyi.github.io/post/hugo-org-mode/</link>
      <pubDate>Tue, 01 Feb 2022 08:37:00 +0000</pubDate>
      
      <guid>https://daotoyi.github.io/post/hugo-org-mode/</guid>
      <description>简述 采用 emacs org-mde 在 Hugo + Github 部署的静态网站上记录个人博客。 Org-mode Read More 生成的文章要支持 Read More ，在需要分割的地方添加 #more (中间有空格)即可。 meta 1 2 3 4 5 #+title: First-orgmode #+Author: daoyi</description>
    </item>
    
  </channel>
</rss>